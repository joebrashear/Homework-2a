==10676== Memcheck, a memory error detector
==10676== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==10676== Using Valgrind-3.20.0 and LibVEX; rerun with -h for copyright info
==10676== Command: ./wish tests/7.in
==10676== Parent PID: 10600
==10676== 
==10676== Conditional jump or move depends on uninitialised value(s)
==10676==    at 0x483F076: free (vg_replace_malloc.c:884)
==10676==    by 0x109593: free_string_array (wish.c:65)
==10676==    by 0x10A69C: process_args (wish.c:425)
==10676==    by 0x10A9E2: run_wish (wish.c:526)
==10676==    by 0x10AB40: main (wish.c:566)
==10676== 
==10689== Syscall param execve(argv) points to uninitialised byte(s)
==10676== Invalid read of size 8
==10676==    at 0x109589: free_string_array (wish.c:65)
==10689==    at 0x493D17B: execve (syscall-template.S:78)
==10689==    by 0x10A3A8: process_args (wish.c:370)
==10676==    by 0x10A69C: process_args (wish.c:425)
==10676==    by 0x10A9E2: run_wish (wish.c:526)
==10689==    by 0x10A9E2: run_wish (wish.c:526)
==10689==    by 0x10AB40: main (wish.c:566)
==10676==    by 0x10AB40: main (wish.c:566)
==10676==  Address 0x4a50820 is 0 bytes after a block of size 16 alloc'd
==10689==  Address 0x4a50818 is 8 bytes inside a block of size 16 alloc'd
==10689==    at 0x483C76F: malloc (vg_replace_malloc.c:392)
==10676==    at 0x483C76F: malloc (vg_replace_malloc.c:392)
==10676==    by 0x4841722: realloc (vg_replace_malloc.c:1451)
==10689==    by 0x4841722: realloc (vg_replace_malloc.c:1451)
==10689==    by 0x109EA5: process_args (wish.c:277)
==10676==    by 0x109EA5: process_args (wish.c:277)
==10676==    by 0x10A9E2: run_wish (wish.c:526)
==10689==    by 0x10A9E2: run_wish (wish.c:526)
==10689==    by 0x10AB40: main (wish.c:566)
==10676==    by 0x10AB40: main (wish.c:566)
==10676== 
==10689== 
==10676== 
==10676== HEAP SUMMARY:
==10676==     in use at exit: 0 bytes in 0 blocks
==10676==   total heap usage: 33 allocs, 33 frees, 4,963 bytes allocated
==10676== 
==10676== All heap blocks were freed -- no leaks are possible
==10676== 
==10676== Use --track-origins=yes to see where uninitialised values come from
==10676== For lists of detected and suppressed errors, rerun with: -s
==10676== ERROR SUMMARY: 3 errors from 2 contexts (suppressed: 0 from 0)
