==10667== Memcheck, a memory error detector
==10667== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==10667== Using Valgrind-3.20.0 and LibVEX; rerun with -h for copyright info
==10667== Command: ./wish tests/6.in
==10667== Parent PID: 10600
==10667== 
==10667== Conditional jump or move depends on uninitialised value(s)
==10667==    at 0x483F076: free (vg_replace_malloc.c:884)
==10667==    by 0x109593: free_string_array (wish.c:65)
==10667==    by 0x10A69C: process_args (wish.c:425)
==10668== Syscall param execve(argv) points to uninitialised byte(s)
==10667==    by 0x10A9E2: run_wish (wish.c:526)
==10667==    by 0x10AB40: main (wish.c:566)
==10668==    at 0x493D17B: execve (syscall-template.S:78)
==10668==    by 0x10A3A8: process_args (wish.c:370)
==10667== 
==10668==    by 0x10A9E2: run_wish (wish.c:526)
==10668==    by 0x10AB40: main (wish.c:566)
==10667== Invalid read of size 8
==10667==    at 0x109589: free_string_array (wish.c:65)
==10668==  Address 0x4a50598 is 8 bytes inside a block of size 16 alloc'd
==10667==    by 0x10A69C: process_args (wish.c:425)
==10667==    by 0x10A9E2: run_wish (wish.c:526)
==10668==    at 0x483C76F: malloc (vg_replace_malloc.c:392)
==10668==    by 0x4841722: realloc (vg_replace_malloc.c:1451)
==10667==    by 0x10AB40: main (wish.c:566)
==10667==  Address 0x4a505a0 is 0 bytes after a block of size 16 alloc'd
==10668==    by 0x109EA5: process_args (wish.c:277)
==10668==    by 0x10A9E2: run_wish (wish.c:526)
==10667==    at 0x483C76F: malloc (vg_replace_malloc.c:392)
==10667==    by 0x4841722: realloc (vg_replace_malloc.c:1451)
==10668==    by 0x10AB40: main (wish.c:566)
==10668== 
==10667==    by 0x109EA5: process_args (wish.c:277)
==10667==    by 0x10A9E2: run_wish (wish.c:526)
==10667==    by 0x10AB40: main (wish.c:566)
==10668== Syscall param execve(argv) points to uninitialised byte(s)
==10667== 
==10668==    at 0x493D17B: execve (syscall-template.S:78)
==10668==    by 0x10A4E6: process_args (wish.c:390)
==10668==    by 0x10A9E2: run_wish (wish.c:526)
==10668==    by 0x10AB40: main (wish.c:566)
==10668==  Address 0x4a50598 is 8 bytes inside a block of size 16 alloc'd
==10668==    at 0x483C76F: malloc (vg_replace_malloc.c:392)
==10668==    by 0x4841722: realloc (vg_replace_malloc.c:1451)
==10668==    by 0x109EA5: process_args (wish.c:277)
==10668==    by 0x10A9E2: run_wish (wish.c:526)
==10668==    by 0x10AB40: main (wish.c:566)
==10668== 
==10668== Conditional jump or move depends on uninitialised value(s)
==10668==    at 0x483F076: free (vg_replace_malloc.c:884)
==10668==    by 0x109593: free_string_array (wish.c:65)
==10668==    by 0x10A559: process_args (wish.c:401)
==10668==    by 0x10A9E2: run_wish (wish.c:526)
==10668==    by 0x10AB40: main (wish.c:566)
==10668== 
==10668== Invalid read of size 8
==10668==    at 0x109589: free_string_array (wish.c:65)
==10668==    by 0x10A559: process_args (wish.c:401)
==10668==    by 0x10A9E2: run_wish (wish.c:526)
==10668==    by 0x10AB40: main (wish.c:566)
==10668==  Address 0x4a505a0 is 0 bytes after a block of size 16 alloc'd
==10668==    at 0x483C76F: malloc (vg_replace_malloc.c:392)
==10668==    by 0x4841722: realloc (vg_replace_malloc.c:1451)
==10668==    by 0x109EA5: process_args (wish.c:277)
==10668==    by 0x10A9E2: run_wish (wish.c:526)
==10668==    by 0x10AB40: main (wish.c:566)
==10668== 
==10668== 
==10668== HEAP SUMMARY:
==10668==     in use at exit: 0 bytes in 0 blocks
==10668==   total heap usage: 15 allocs, 15 frees, 4,801 bytes allocated
==10668== 
==10668== All heap blocks were freed -- no leaks are possible
==10668== 
==10668== Use --track-origins=yes to see where uninitialised values come from
==10668== For lists of detected and suppressed errors, rerun with: -s
==10668== ERROR SUMMARY: 5 errors from 4 contexts (suppressed: 0 from 0)
==10667== 
==10667== HEAP SUMMARY:
==10667==     in use at exit: 0 bytes in 0 blocks
==10667==   total heap usage: 15 allocs, 15 frees, 4,801 bytes allocated
==10667== 
==10667== All heap blocks were freed -- no leaks are possible
==10667== 
==10667== Use --track-origins=yes to see where uninitialised values come from
==10667== For lists of detected and suppressed errors, rerun with: -s
==10667== ERROR SUMMARY: 3 errors from 2 contexts (suppressed: 0 from 0)
